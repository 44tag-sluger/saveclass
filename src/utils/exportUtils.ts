
export const addWatermark = (text: string): string => {
  return `${text}\n\nGenerated by SaveClass Finance Toolkit`;
};

export const generateCSV = (data: any[], headers: string[]): string => {
  // Create header row
  let csv = headers.join(',') + '\n';
  
  // Add data rows
  data.forEach(row => {
    const values = headers.map(header => {
      const value = row[header];
      // Escape commas and quotes in values
      return `"${String(value).replace(/"/g, '""')}"`;
    });
    csv += values.join(',') + '\n';
  });
  
  return csv;
};

export const downloadCSV = (data: string, filename: string): void => {
  const blob = new Blob([data], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  
  // Create download URL
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  
  // Trigger download
  document.body.appendChild(link);
  link.click();
  
  // Clean up
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const downloadPNG = async (elementId: string, filename: string): Promise<void> => {
  try {
    // Wait for html2canvas to be dynamically imported
    const html2canvas = await import('html2canvas');
    
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error(`Element with ID ${elementId} not found`);
    }
    
    const canvas = await html2canvas.default(element, {
      useCORS: true,
      scale: 2, // Higher quality
      logging: false,
      backgroundColor: '#ffffff'
    });
    
    // Convert to PNG data URL
    const imageData = canvas.toDataURL('image/png');
    
    // Create download link
    const link = document.createElement('a');
    link.download = filename;
    link.href = imageData;
    
    // Trigger download
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } catch (error) {
    console.error('Failed to export as PNG:', error);
    throw error;
  }
};
